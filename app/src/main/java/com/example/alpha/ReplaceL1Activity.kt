// ReplaceL1Activity ‚Äî —Ä–µ–∂–∏–º –∑–∞–º–µ–Ω—ã –≤–ª–æ–∂–µ–Ω–∏–π –≤ –∫–æ—Ä–æ–±–µ
package com.example.alpha

import android.content.res.ColorStateList
import android.graphics.Color
import android.os.Bundle
import android.os.VibrationEffect
import android.os.Vibrator
import android.util.Log
import android.view.View
import android.widget.*
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.Toolbar
import androidx.lifecycle.Observer
import org.json.JSONArray
import org.json.JSONObject

class ReplaceL1Activity : AppCompatActivity() {
    // UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    private lateinit var toolbar: Toolbar
    private lateinit var statusIndicator: View
    private lateinit var messageView: TextView
    private lateinit var progressBar: ProgressBar
    private lateinit var progressText: TextView
    private lateinit var modeRadioGroup: RadioGroup
    private lateinit var btnSave: Button
    private lateinit var btnCancel: Button
    private var clearMessageRunnable: Runnable? = null
    private val handler = android.os.Handler()

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
    private var isAddMode = false
    private var isActivityResumed = false

    // –î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ—Ä–æ–±—É
    private var unitPerBox = 0
    private val currentItems = mutableListOf<String>()
    private var currentCodeValue: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_replace_l1)
        Log.d("ReplaceL1Activity", "onCreate: –∞–∫—Ç–∏–≤–∏—Ç–∏ —Å–æ–∑–¥–∞–Ω–∞")

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
        toolbar = findViewById(R.id.toolbar)
        setSupportActionBar(toolbar)
        supportActionBar?.title = "–ó–∞–º–µ–Ω–∞ –≤ –∫–æ—Ä–æ–±–µ"

        statusIndicator = findViewById(R.id.statusIndicator)
        messageView = findViewById(R.id.messageView)
        progressBar = findViewById(R.id.progressBar)
        progressText = findViewById(R.id.progressText)
        modeRadioGroup = findViewById(R.id.modeRadioGroup)
        btnSave = findViewById(R.id.btnSave)
        btnCancel = findViewById(R.id.btnCancel)

        // –°–ª—É—à–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ / —É–¥–∞–ª–µ–Ω–∏–µ)
        modeRadioGroup.setOnCheckedChangeListener { _, checkedId ->
            isAddMode = (checkedId == R.id.addModeRadioButton)
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –û—Ç–º–µ–Ω–∞
        btnCancel.setOnClickListener { showCancelConfirmation() }
        btnSave.setOnClickListener { showSaveConfirmation() }

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ WebSocket
        WebSocketManagerInstance.status.observe(this, Observer { (message, color) ->
            updateStatusIndicator(color)
        })

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç WebSocket
        WebSocketManagerInstance.webSocketManager?.setMessageListener {
            runOnUiThread { handleWebSocketResponse(it) }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
        BarcodeManager.getInstance(this).addListener { type, value ->
            runOnUiThread {
                if (isActivityResumed) handleBarcodeScanned(type, value)
            }
        }

        // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        showInitialMessage()
    }

    override fun onResume() {
        super.onResume()
        isActivityResumed = true
        Log.d("ReplaceL1Activity", "onResume: –∞–∫—Ç–∏–≤–∏—Ç–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    }

    override fun onPause() {
        super.onPause()
        isActivityResumed = false
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ WebSocket
    private fun updateStatusIndicator(color: Int) {
        statusIndicator.backgroundTintList = ColorStateList.valueOf(color)
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
    private fun showInitialMessage() {
        messageView.text = "–ü—Ä–æ—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∫–æ—Ä–æ–±–∞ –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏—è"
        messageView.setTextColor(Color.DKGRAY)
        progressText.text = "0/0"
        progressBar.max = 0
        progressBar.progress = 0
        currentItems.clear()
        currentCodeValue = null
        setRadioButtonsEnabled(false, false)
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
    private fun handleBarcodeScanned(type: String, value: String) {
        if (currentCodeValue == null) {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–æ–± ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º code_check_for_replace
            val msg = JsonMessageFormatter.createJsonMessageTaskCode(
                typeCode = type,
                value = value,
                mode = 0,
                aggLevel = 11,
                code = "code_check_for_desagg"
            )
            sendMessageIfConnected(msg)
        } else {
            // –†–∞–±–æ—Ç–∞–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if (isAddMode) {
                if (currentItems.contains(value)) {
                    showMessage("–ö–æ–¥ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –∫–æ—Ä–æ–±–µ", Color.RED, true)
                    return
                }
                if (currentItems.size >= unitPerBox) {
                    showMessage("–ö–æ—Ä–æ–± –∑–∞–ø–æ–ª–Ω–µ–Ω", Color.RED, true)
                    return
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º ‚Äî code_check —Å aggLevel = 1
                val msg = JsonMessageFormatter.createJsonMessageTaskCode(
                    typeCode = type,
                    value = value,
                    mode = 0,
                    aggLevel = 1,
                    code = "code_check"
                )
                sendMessageIfConnected(msg)
            } else {
                if (!currentItems.contains(value)) {
                    showMessage("–ö–æ–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–æ–∂–µ–Ω–∏–µ–º", Color.RED, true)
                } else {
                    currentItems.remove(value)
                    updateProgress()
                    validateRadioAvailability() // üîß –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, —á—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                }
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç WebSocket
    private fun handleWebSocketResponse(response: String) {
        try {
            val json = JSONObject(response)
            val code = json.optString("code")
            val status = json.optInt("status")
            val message = json.optString("message")

            when (code) {
                "code_check_for_desagg" -> {
                    if (status == -1) {
                        showMessage(message, Color.RED, true)
                    } else {
                        val values = json.optJSONArray("values")?.getJSONObject(0) ?: return
                        currentCodeValue = values.optString("code_value")
                        unitPerBox = values.optInt("unitPerBox")
                        val codes = values.optJSONArray("agg_codes")

                        currentItems.clear()
                        if (codes != null) {
                            for (i in 0 until codes.length()) {
                                currentItems.add(codes.getString(i))
                            }
                        }
                        updateProgress()
                        showMessage(message, Color.rgb(0, 100, 0), true)
                        setRadioButtonsEnabled(true, true)
                        validateRadioAvailability()
                    }
                }
                "code_check" -> {
                    if (status == 0) {
                        val value = json.optString("values")
                        currentItems.add(value)
                        updateProgress()
                        validateRadioAvailability()
                    } else {
                        showMessage(message, Color.RED, true)
                    }
                }
                "Replace" -> {
                    if (status == 0) {
                        showMessage("–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", Color.rgb(0, 100, 0), true)
                        showInitialMessage()
                    } else {
                        showMessage(message, Color.RED, true)
                    }
                }
            }
        } catch (e: Exception) {
            Log.e("ReplaceL1Activity", "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", e)
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    private fun updateProgress() {
        progressBar.max = unitPerBox
        progressBar.progress = currentItems.size
        progressText.text = "${currentItems.size}/$unitPerBox"
    }

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –≤–∏–±—Ä–∞—Ü–∏–µ–π
    private fun showMessage(text: String, color: Int, autoClear: Boolean = true) {
        messageView.text = text
        messageView.setTextColor(color)
        vibrate(300)

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        clearMessageRunnable?.let { handler.removeCallbacks(it) }
        if (autoClear) {
            clearMessageRunnable = Runnable {
                messageView.text = ""
            }.also { handler.postDelayed(it, 3000) }
        }
    }

    // –í–∏–±—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    private fun vibrate(ms: Long) {
        val vib = getSystemService(VIBRATOR_SERVICE) as Vibrator
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            vib.vibrate(VibrationEffect.createOneShot(ms, VibrationEffect.DEFAULT_AMPLITUDE))
        } else {
            vib.vibrate(ms)
        }
    }

    // –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π —Ä–µ–∂–∏–º–∞
    private fun setRadioButtonsEnabled(addEnabled: Boolean, removeEnabled: Boolean) {
        findViewById<RadioButton>(R.id.addModeRadioButton).isEnabled = addEnabled
        findViewById<RadioButton>(R.id.removeModeRadioButton).isEnabled = removeEnabled
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å/—É–¥–∞–ª—è—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    private fun validateRadioAvailability() {
        val addButton = findViewById<RadioButton>(R.id.addModeRadioButton)
        val removeButton = findViewById<RadioButton>(R.id.removeModeRadioButton)

        addButton.isEnabled = currentItems.size < unitPerBox
        removeButton.isEnabled = currentItems.isNotEmpty()

        if (!addButton.isEnabled && isAddMode) removeButton.isChecked = true
        if (!removeButton.isEnabled && !isAddMode) addButton.isChecked = true
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
    private fun showCancelConfirmation() {
        AlertDialog.Builder(this)
            .setTitle("–û—Ç–º–µ–Ω–∞")
            .setMessage("–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ—Ä–æ–±–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –í—ã —É–≤–µ—Ä–µ–Ω—ã?")
            .setPositiveButton("–î–∞") { d, _ -> showInitialMessage(); d.dismiss() }
            .setNegativeButton("–ù–µ—Ç", null)
            .show()
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    private fun showSaveConfirmation() {
        AlertDialog.Builder(this)
            .setTitle("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
            .setMessage("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ—Ä–æ–±–µ?")
            .setPositiveButton("–î–∞") { d, _ -> sendReplaceRequest(); d.dismiss() }
            .setNegativeButton("–ù–µ—Ç", null)
            .show()
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ Replace
    private fun sendReplaceRequest() {
        val json = JSONObject().apply {
            put("code", "Replace")
            put("status", 0)
            put("values", JSONArray(currentItems))
            put("code_value", currentCodeValue ?: "")
        }
        sendMessageIfConnected(json.toString())
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
    private fun sendMessageIfConnected(msg: String) {
        if (WebSocketManagerInstance.webSocketManager?.isConnected() == true) {
            WebSocketManagerInstance.webSocketManager?.send(msg)
            Log.d("ReplaceL1Activity", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: $msg")
        } else {
            showMessage("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", Color.RED, true)
        }
    }
}
